stages:
  - validate
  - build
  - test
  - package
  - deploy

variables:
  NODE_VERSION: "20"
  CACHE_KEY: "${CI_COMMIT_REF_SLUG}-yarn-cache"
  YARN_CACHE_FOLDER: ".yarn/cache"

# Default template for all Node.js jobs
.node_template: &node_template
  image: node:${NODE_VERSION}-alpine
  cache:
    key: $CACHE_KEY
    paths:
      - .yarn/cache/
      - node_modules/
    policy: pull-push
  before_script:
    - apk add --no-cache git
    - corepack enable
    - corepack prepare yarn@4.0.2 --activate
    - yarn install --immutable --check-cache

# Validation stage
lint:
  <<: *node_template
  stage: validate
  script:
    - yarn lint
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  allow_failure: false

type_check:
  <<: *node_template
  stage: validate
  script:
    - yarn type-check
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  allow_failure: false

security_scan:
  <<: *node_template
  stage: validate
  script:
    - yarn npm audit --all --recursive --environment production
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Build stage
build:
  <<: *node_template
  stage: build
  script:
    - yarn build
    - ls -la dist/
    - echo "Build completed successfully"
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
    reports:
      # Add size information
      junit: dist/build-report.xml
  after_script:
    - |
      echo "Build artifacts:"
      find dist -type f -exec ls -lh {} \;
      echo "Total dist size: $(du -sh dist | cut -f1)"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Test stage
test_build_artifacts:
  <<: *node_template
  stage: test
  dependencies:
    - build
  script:
    - |
      echo "Validating build artifacts..."

      # Check required files exist
      test -f dist/index.js || (echo "Missing dist/index.js" && exit 1)
      test -f dist/index.cjs || (echo "Missing dist/index.cjs" && exit 1)
      test -f dist/index.d.ts || (echo "Missing dist/index.d.ts" && exit 1)

      # Check files are not empty
      test -s dist/index.js || (echo "dist/index.js is empty" && exit 1)
      test -s dist/index.cjs || (echo "dist/index.cjs is empty" && exit 1)
      test -s dist/index.d.ts || (echo "dist/index.d.ts is empty" && exit 1)

      # Try to load the built modules
      node -e "const pkg = require('./dist/index.cjs'); console.log('CJS import successful');"
      node -e "import('./dist/index.js').then(() => console.log('ESM import successful'));"

      echo "All build artifacts validated successfully"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

test_typescript_declarations:
  <<: *node_template
  stage: test
  dependencies:
    - build
  script:
    - |
      echo "Testing TypeScript declarations..."

      # Create a test TypeScript file to validate types
      cat > test-types.ts << 'EOF'
      import { OPNsenseClient } from './dist/index.js';

      // This should compile without errors if types are correct
      const client = new OPNsenseClient({
        baseUrl: 'https://opnsense.example.com',
        apiKey: 'test-key',
        apiSecret: 'test-secret'
      });

      console.log('Type checking passed');
      EOF

      # Check if TypeScript can compile with our declarations
      npx tsc --noEmit --strict test-types.ts

      echo "TypeScript declarations validated successfully"
  after_script:
    - rm -f test-types.ts
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Package validation stage
validate_package:
  <<: *node_template
  stage: package
  dependencies:
    - build
  script:
    - |
      echo "Validating package structure..."

      # Validate package.json exports
      node -e "
        const pkg = require('./package.json');
        const fs = require('fs');
        
        // Check main entry points exist
        if (!fs.existsSync(pkg.main)) {
          throw new Error('Main entry point does not exist: ' + pkg.main);
        }
        if (!fs.existsSync(pkg.module)) {
          throw new Error('Module entry point does not exist: ' + pkg.module);
        }
        if (!fs.existsSync(pkg.types)) {
          throw new Error('Types entry point does not exist: ' + pkg.types);
        }
        
        // Check exports
        Object.entries(pkg.exports || {}).forEach(([key, value]) => {
          if (typeof value === 'object') {
            Object.entries(value).forEach(([format, path]) => {
              if (!fs.existsSync(path)) {
                throw new Error('Export path does not exist: ' + path + ' for ' + key + '.' + format);
              }
            });
          }
        });
        
        console.log('Package structure validation passed');
      "

      # Test package installation simulation
      yarn pack --dry-run

      echo "Package validation completed successfully"
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG

package_tarball:
  <<: *node_template
  stage: package
  dependencies:
    - build
  script:
    - yarn pack
    - ls -la *.tgz
  artifacts:
    paths:
      - "*.tgz"
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG

# Deploy stage
deploy_npm:
  <<: *node_template
  stage: deploy
  dependencies:
    - build
    - package_tarball
  script:
    - |
      echo "Preparing npm deployment..."

      # Verify NPM_TOKEN is set
      if [ -z "$NPM_TOKEN" ]; then
        echo "NPM_TOKEN is not set. Cannot publish to npm."
        exit 1
      fi

      # Configure npm authentication
      echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc

      # Verify we can authenticate
      npm whoami

      # Check if version already exists
      PACKAGE_NAME=$(node -e "console.log(require('./package.json').name)")
      PACKAGE_VERSION=$(node -e "console.log(require('./package.json').version)")

      if npm view "${PACKAGE_NAME}@${PACKAGE_VERSION}" version 2>/dev/null; then
        echo "Version ${PACKAGE_VERSION} already exists on npm. Skipping publish."
        exit 0
      fi

      # Publish to npm
      yarn npm publish --access public

      echo "Successfully published ${PACKAGE_NAME}@${PACKAGE_VERSION} to npm"
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
  environment:
    name: npm-production
    url: https://www.npmjs.com/package/@richard-stovall/opnsense-typescript-client

# Performance monitoring
bundle_analysis:
  <<: *node_template
  stage: test
  dependencies:
    - build
  script:
    - |
      echo "Analyzing bundle size..."

      # Calculate sizes
      ESM_SIZE=$(stat -f%z dist/index.js 2>/dev/null || stat -c%s dist/index.js)
      CJS_SIZE=$(stat -f%z dist/index.cjs 2>/dev/null || stat -c%s dist/index.cjs)
      DTS_SIZE=$(stat -f%z dist/index.d.ts 2>/dev/null || stat -c%s dist/index.d.ts)

      echo "Bundle sizes:"
      echo "  ESM (index.js): ${ESM_SIZE} bytes"
      echo "  CJS (index.cjs): ${CJS_SIZE} bytes"
      echo "  Types (index.d.ts): ${DTS_SIZE} bytes"

      # Warn if bundles are too large (>1MB)
      if [ $ESM_SIZE -gt 1048576 ] || [ $CJS_SIZE -gt 1048576 ]; then
        echo "⚠️  Warning: Bundle size exceeds 1MB"
      fi

      # Create size report
      cat > bundle-size-report.json << EOF
      {
        "esm_size": $ESM_SIZE,
        "cjs_size": $CJS_SIZE,
        "types_size": $DTS_SIZE,
        "total_size": $((ESM_SIZE + CJS_SIZE + DTS_SIZE)),
        "commit": "$CI_COMMIT_SHA",
        "ref": "$CI_COMMIT_REF_NAME"
      }
      EOF

      echo "Bundle analysis completed"
  artifacts:
    paths:
      - bundle-size-report.json
    expire_in: 30 days
    reports:
      performance: bundle-size-report.json
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  allow_failure: true
