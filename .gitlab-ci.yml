# GitLab CI/CD Pipeline for OPNsense TypeScript SDK
# This pipeline builds, tests, and publishes the TypeScript client

# Define stages
stages:
  - test-runner
  - validate
  - build
  - test
  - package
  - publish

# Variables
variables:
  NODE_VERSION: "20"
  BUN_VERSION: "1.1.25"

# Simple runner test job - runs on every commit
runner-test:
  stage: test-runner
  image: alpine:latest
  script:
    - echo "ðŸ§ª Testing GitLab Runner connectivity"
    - echo "Runner ID: $CI_RUNNER_ID"
    - echo "Runner Description: $CI_RUNNER_DESCRIPTION"
    - echo "Runner Tags: $CI_RUNNER_TAGS"
    - echo "Project: $CI_PROJECT_NAME"
    - echo "Branch: $CI_COMMIT_REF_NAME"
    - echo "Commit: $CI_COMMIT_SHA"
    - echo "Pipeline: $CI_PIPELINE_ID"
    - echo "Job: $CI_JOB_ID"
    - echo "âœ… Runner is working correctly!"
    - date
    - whoami
    - pwd
    - ls -la
  # This job runs on every push - no restrictions
  rules:
    - when: always

# Cache dependencies to speed up builds
cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - node_modules/
    - bun.lockb

# Install Bun and dependencies
.setup_bun: &setup_bun
  before_script:
    - curl -fsSL https://bun.sh/install | bash
    - export PATH="$HOME/.bun/bin:$PATH"
    - bun --version
    - bun install

# Validate stage - Check code quality and formatting
validate:lint:
  stage: validate
  image: oven/bun:${BUN_VERSION}
  <<: *setup_bun
  script:
    - echo "Running ESLint checks..."
    - bun run lint
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

validate:typecheck:
  stage: validate
  image: oven/bun:${BUN_VERSION}
  <<: *setup_bun
  script:
    - echo "Running TypeScript type checking..."
    - bunx tsc --noEmit
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Build stage - Compile TypeScript and generate distribution files
build:
  stage: build
  image: oven/bun:${BUN_VERSION}
  <<: *setup_bun
  script:
    - echo "Building TypeScript SDK..."
    - bun run build
    - echo "Build completed successfully"
    - ls -la dist/
  artifacts:
    paths:
      - dist/
    expire_in: 1 hour
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Test stage - Run unit tests (if they exist)
test:unit:
  stage: test
  image: oven/bun:${BUN_VERSION}
  <<: *setup_bun
  dependencies:
    - build
  script:
    - echo "Running unit tests..."
    - |
      if bun run --silent test 2>/dev/null; then
        echo "Running existing test suite"
        bun run test
      else
        echo "No test script found in package.json"
        echo "Performing basic validation of built files..."
        test -f dist/index.js || (echo "Missing ES module build" && exit 1)
        test -f dist/index.cjs || (echo "Missing CommonJS build" && exit 1)
        test -f dist/index.d.ts || (echo "Missing TypeScript declarations" && exit 1)
        echo "All required build artifacts present"
      fi
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Package validation stage
package:validate:
  stage: package
  image: oven/bun:${BUN_VERSION}
  <<: *setup_bun
  dependencies:
    - build
  script:
    - echo "Validating package structure..."
    - bun run build
    - echo "Checking package exports..."
    - node -e "const pkg = require('./package.json'); console.log('Package name:', pkg.name); console.log('Version:', pkg.version); const fs = require('fs'); [pkg.main, pkg.module, pkg.types].forEach(file => { if (!fs.existsSync(file)) { console.error('Missing file:', file); process.exit(1); } console.log('âœ“', file, 'exists'); }); console.log('Package validation passed');"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Publish to npm registry (only on tags)
publish:npm:
  stage: publish
  image: oven/bun:${BUN_VERSION}
  <<: *setup_bun
  dependencies:
    - build
    - package:validate
  script:
    - echo "Publishing to npm registry..."
    - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
    - bun run build
    - npm publish --access public
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
  environment:
    name: production

# Create GitLab package registry release
publish:gitlab:
  stage: publish
  image: oven/bun:${BUN_VERSION}
  <<: *setup_bun
  dependencies:
    - build
    - package:validate
  script:
    - echo "Publishing to GitLab Package Registry..."
    - echo "@loworbit:registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/" > ~/.npmrc
    - echo "${CI_API_V4_URL#https?}/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> ~/.npmrc
    - bun run build
    - npm publish
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
  environment:
    name: registry

# Performance check job
performance:bundle_size:
  stage: test
  image: oven/bun:${BUN_VERSION}
  <<: *setup_bun
  dependencies:
    - build
  script:
    - echo "Analyzing bundle size..."
    - ls -lh dist/
    - echo "ES Module size:" && wc -c < dist/index.js
    - echo "CommonJS size:" && wc -c < dist/index.cjs
    - echo "TypeScript declarations size:" && wc -c < dist/index.d.ts
    - |
      ES_SIZE=$(wc -c < dist/index.js)
      CJS_SIZE=$(wc -c < dist/index.cjs)
      MAX_SIZE=1048576
      if [ "$ES_SIZE" -gt "$MAX_SIZE" ] || [ "$CJS_SIZE" -gt "$MAX_SIZE" ]; then
        echo "Warning: Bundle size may be too large"
        echo "ES Module: $ES_SIZE bytes"
        echo "CommonJS: $CJS_SIZE bytes"
      else
        echo "Bundle size looks good"
      fi
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH